# -*- coding: utf-8 -*-
import ctypes
import os
import sys
import pythoncom
import winreg
from PyHook3 import HookConstants, HookManager, GetKeyState
# import requests
import log_config

# https://admx.help/ 网站收录了各种有用的东西，注册表信息就是从这里找到的
# 太有用了，一定要谨记
lockValue = 1
# 创建一个用于通信的标志文件
flag_file = "flag.txt"

# 提升权限
def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False


def elevate():
    if not is_admin():
        # 提升权限
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)

# 键盘事件处理函数
def OnKeyboardEvent(event):
    log_config.logging.info(f"用户按键操作 | 虚拟键码：{event.KeyID} , Ascii字符：{event.Ascii} , Alt协同：{event.Alt}")
    # 屏蔽组合ALT+TAB
    if GetKeyState(HookConstants.VKeyToID('VK_MENU')) and event.KeyID == HookConstants.VKeyToID(
            'VK_TAB'):  # type: ignore
        return False
    # 屏蔽系统Win
    if event.KeyID == HookConstants.VKeyToID("VK_LWIN") or event.KeyID == HookConstants.VKeyToID(
            "VK_RWIN"):  # type: ignore
        return False
    # 屏蔽Alt+F4
    if GetKeyState(HookConstants.VKeyToID('VK_MENU')) and event.KeyID == HookConstants.VKeyToID(
            'VK_F4'):  # type: ignore
        return False
    # 屏蔽Ctrl+Shift+ESC
    if GetKeyState(HookConstants.VKeyToID('VK_CONTROL')) and GetKeyState(
            HookConstants.VKeyToID('VK_SHIFT')) and event.KeyID == HookConstants.VKeyToID('VK_ESCAPE'):  # type: ignore
        return False
    # 屏蔽 DEL
    if event.KeyID == HookConstants.VKeyToID('VK_DELETE'):  # type: ignore
        return False
    # 屏蔽Ctrl+V
    if GetKeyState(HookConstants.VKeyToID('VK_CONTROL')) and event.KeyID == 0x56:  # type: ignore
        return False
    # 屏蔽Shift+insert
    if GetKeyState(HookConstants.VKeyToID('VK_SHIFT')) and event.KeyID == HookConstants.VKeyToID(
            'VK_INSERT'):  # type: ignore
        return False
    # 屏蔽 Ctrl+ALT+DELETE 并不会有效果，因为Ctrl+ALT+DELETE等级太高了 if GetKeyState(HookConstants.VKeyToID('VK_MENU')) and
    # GetKeyState(HookConstants.VKeyToID('VK_CONTROL')) and event.KeyID == HookConstants.VKeyToID('VK_DELETE'):
    # return False 返回True则不会屏蔽对应键

    # 监听一个组合键位，来执行退出。  有点进程上的问题
    # if GetKeyState(HookConstants.VKeyToID('VK_MENU')) and GetKeyState(HookConstants.VKeyToID('VK_SHIFT')) and \
    #         GetKeyState(HookConstants.VKeyToID('VK_CONTROL')) and event.KeyID == 0x51:  # type: ignore
    #     log_config.logging.error("用户通过内置退出锁定快捷键 退出锁定 ALT+CTRL+SHIFT+Q")
    #     requests.get('http://127.0.0.1:9529/LockOut')
    #     return False

    return True


def lock():
    # 创建hook manager对象
    hm = HookManager()
    # 将OnKeyboardEvent函数绑定到KeyDown事件上
    hm.KeyDown = OnKeyboardEvent
    # 设置键盘钩子
    hm.HookKeyboard()
    log_config.logging.info(f"监听键盘组合按键---启动：{not should_exit()}")
    while not should_exit():
        pythoncom.PumpWaitingMessages()  # 正常处理消息
    # pythoncom.PumpMessages()
    log_config.logging.info("监听被终止，进行清理操作")
    hm.UnhookKeyboard()  # 释放键盘钩子
    del hm
    ctypes.windll.user32.PostQuitMessage(0)


def regLockTaskMgr():
    # 定义注册表项路径
    global lockValue
    reg_key_path = r"Software\Microsoft\Windows\CurrentVersion\Policies\System"
    try:
        # 尝试打开注册表项，如果不存在，就创建它
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, reg_key_path, 0, winreg.KEY_WRITE)
    except FileNotFoundError:
        # 如果找不到键，就创建它
        key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, reg_key_path)

    try:
        # 创建或修改名为 "DisableTaskMgr" 的 DWORD 键值，将其值设置为 1
        winreg.SetValueEx(key, "DisableTaskMgr", 0, winreg.REG_DWORD, lockValue)
        # 关闭注册表项
        winreg.CloseKey(key)
        log_config.logging.info("已成功禁用 windows资源管理器。")
    except Exception as e:
        log_config.logging.error(f'禁用 windows资源管理器。时出现错误：{e}')


def regLockSwitchUser():
    global lockValue
    reg_key_path = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
    try:
        # 尝试打开注册表项，如果不存在，就创建它
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, reg_key_path, 0, winreg.KEY_WRITE)
    except FileNotFoundError:
        # 如果找不到键，就创建它
        key = winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, reg_key_path)

    try:
        # 创建或修改名为 "HideFastUserSwitching" 的 DWORD 键值，将其值设置为 1，这将禁用切换用户功能。
        winreg.SetValueEx(key, "HideFastUserSwitching", 0, winreg.REG_DWORD, lockValue)
        # 关闭注册表项
        winreg.CloseKey(key)
        log_config.logging.info("已成功禁用 切换用户。")
    except Exception as e:
        log_config.logging.error(f"禁用 切换用户时出现错误:{e}")


def regLockUserLoginOffAndClose():
    global lockValue
    reg_key_path = r"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer"
    try:
        # 尝试打开注册表项，如果不存在，就创建它
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, reg_key_path, 0, winreg.KEY_WRITE)
    except FileNotFoundError:
        # 如果找不到键，就创建它
        key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, reg_key_path)

    try:
        winreg.SetValueEx(key, "NoLogoff", 0, winreg.REG_DWORD, lockValue)
        winreg.SetValueEx(key, "NoClose", 0, winreg.REG_DWORD, lockValue)
        # 关闭注册表项
        winreg.CloseKey(key)
        log_config.logging.info("已成功禁用 注销用户。")
    except Exception as e:
        log_config.logging.error(f"禁用 注销用户时出现错误:{e}")


def regLockWorkstationAndChangePassword():
    global lockValue
    reg_key_path = r"Software\Microsoft\Windows\CurrentVersion\Policies\System"
    try:
        # 尝试打开注册表项，如果不存在，就创建它
        key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, reg_key_path, 0, winreg.KEY_WRITE)
    except FileNotFoundError:
        # 如果找不到键，就创建它
        key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, reg_key_path)

    try:
        winreg.SetValueEx(key, "DisableLockWorkstation", 0, winreg.REG_DWORD, lockValue)
        winreg.SetValueEx(key, "DisableChangePassword", 0, winreg.REG_DWORD, lockValue)
        # 关闭注册表项
        winreg.CloseKey(key)
        log_config.logging.info("已成功禁用 屏幕锁定。")
    except Exception as e:
        log_config.logging.error(f"禁用 屏幕锁定时出现错误:{e}")


def regLockTaskbar():
    h = ctypes.windll.user32.FindWindowA(b'Shell_TrayWnd', None)
    # hide the taskbar
    ctypes.windll.user32.ShowWindow(h, 0)

# 子进程中检查标志文件来确定是否退出
def should_exit():
    if os.path.exists(flag_file):
        with open(flag_file, "r",encoding='utf-8') as file:
            content = file.read()
            return content == "exit"
    return False


def lockMain():
    # 检查并提升管理员权限
    elevate()
    if not is_admin():
        log_config.logging.error('Lock Auth error')
    else:
        #  提权成功
        regLockTaskMgr()
        regLockSwitchUser()
        regLockUserLoginOffAndClose()
        regLockWorkstationAndChangePassword()
        regLockTaskbar()
        # 通知系统更新策略
        ctypes.windll.user32.SystemParametersInfoW(0x0020, 0, 0, 0)
        lock()
