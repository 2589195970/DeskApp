name: Build Windows Installer

# 工作流触发条件
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: '发布类型'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - release
        - beta

# 环境变量
env:
  NODE_VERSION: '16.20.2'  # Vue CLI 4 兼容版本
  PYTHON_VERSION: '3.9'
  INNO_SETUP_VERSION: '6.2.2'

jobs:
  build:
    name: Build UniversityMarking Installer (Optimized)
    runs-on: windows-latest
    timeout-minutes: 60  # 全局超时1小时
    
    strategy:
      fail-fast: false  # 不因单个失败而停止所有构建
      matrix:
        architecture: [x86]  # 专注32位版本
    
    steps:
    # 检出代码
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    # 设置 Node.js 环境
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.20.2'
        cache: 'npm'
        cache-dependency-path: 'Electron_App/package-lock.json'
    
    # 验证 Node.js 版本
    - name: Verify Node.js Version
      run: |
        Write-Output "Node.js version: $(node --version)"
        Write-Output "npm version: $(npm --version)"
        $nodeVersion = node --version
        if ($nodeVersion -ne "v16.20.2") {
          Write-Error "Error: Node.js version mismatch! Expected v16.20.2, got $nodeVersion"
          exit 1
        }
    
    # 设置 Python 环境
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.architecture }}
    
    # 安装 Python 依赖
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r LockSys_Python/requirements.txt
    
    # 安装 Electron 依赖 (优化缓存)
    - name: Install Electron Dependencies (Cached)
      working-directory: Electron_App
      run: |
        Write-Output "Installing Electron dependencies with optimizations..."
        
        # 清理npm缓存
        npm cache clean --force
        
        # 快速安装
        npm ci --prefer-offline --no-audit --no-fund --silent
        
        Write-Output "✓ Dependencies installed successfully"
      env:
        NODE_OPTIONS: "--max-old-space-size=4096"
        NPM_CONFIG_PROGRESS: "false"
        NPM_CONFIG_LOGLEVEL: "warn"
      timeout-minutes: 10
    
    # 构建 Python 组件 (简化高效版)
    - name: Build Python Components (Ultra Reliable)
      timeout-minutes: 20
      run: |
        Write-Output "=== Ultra Reliable Python Build ==="
        
        # 构建系统锁定服务
        Write-Output "`n🔨 Building LockSys_Python..."
        cd LockSys_Python
        
        if (-not (Test-Path "dist")) { mkdir dist }
        if (-not (Test-Path "dist/win32")) { mkdir dist/win32 }
        
        Write-Output "Running PyInstaller for LockSys_Python..."
        python -m PyInstaller --onefile --distpath dist/win32 --clean --noconfirm main.py
        
        if ($LASTEXITCODE -eq 0 -and (Test-Path "dist/win32/main.exe")) {
          $fileSize = (Get-Item "dist/win32/main.exe").Length
          Write-Output "✅ LockSys_Python build SUCCESS ($fileSize bytes)"
        } else {
          Write-Output "⚠️ LockSys_Python build failed, but continuing..."
          Write-Output "LASTEXITCODE: $LASTEXITCODE"
          if (Test-Path "dist/win32") {
            Write-Output "Files in dist/win32:"
            Get-ChildItem "dist/win32" | ForEach-Object { Write-Output "  - $($_.Name)" }
          }
        }
        
        # 返回根目录
        cd ..
        
        # 构建配置工具
        Write-Output "`n🔨 Building ChangeConfigUtil..."
        cd ChangeConfigUtil
        
        if (-not (Test-Path "dist")) { mkdir dist }
        if (-not (Test-Path "dist/win32")) { mkdir dist/win32 }
        
        Write-Output "Running PyInstaller for ChangeConfigUtil..."
        python -m PyInstaller --onefile --windowed --distpath dist/win32 --clean --noconfirm main.py
        
        if ($LASTEXITCODE -eq 0 -and (Test-Path "dist/win32/main.exe")) {
          $fileSize = (Get-Item "dist/win32/main.exe").Length
          Write-Output "✅ ChangeConfigUtil build SUCCESS ($fileSize bytes)"
        } else {
          Write-Output "⚠️ ChangeConfigUtil build failed, but continuing..."
          Write-Output "LASTEXITCODE: $LASTEXITCODE"
          if (Test-Path "dist/win32") {
            Write-Output "Files in dist/win32:"
            Get-ChildItem "dist/win32" | ForEach-Object { Write-Output "  - $($_.Name)" }
          }
        }
        
        # 返回根目录
        cd ..
        
        Write-Output "`n📊 Final Python Components Status:"
        $lockSuccess = Test-Path "LockSys_Python/dist/win32/main.exe"
        $configSuccess = Test-Path "ChangeConfigUtil/dist/win32/main.exe"
        
        Write-Output "LockSys_Python: $(if ($lockSuccess) { '✅ SUCCESS' } else { '❌ FAILED' })"
        Write-Output "ChangeConfigUtil: $(if ($configSuccess) { '✅ SUCCESS' } else { '❌ FAILED' })"
        
        # 至少有一个成功就继续（Electron是核心，Python是辅助）
        if (-not $lockSuccess -and -not $configSuccess) {
          Write-Error "Both Python components failed - this is critical"
          exit 1
        }
        
        Write-Output "✅ Python components build completed (at least one succeeded)"
    
    # 安装 Inno Setup
    - name: Install Inno Setup
      run: |
        $url = "https://jrsoftware.org/download.php/is.exe"
        $output = "$env:TEMP\innosetup.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        
        # 添加到 PATH
        $innoPath = "${env:ProgramFiles(x86)}\Inno Setup 6"
        echo "$innoPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    # 准备构建环境
    - name: Prepare Build Environment
      run: |
        # 创建目录结构
        New-Item -ItemType Directory -Force -Path "dist"
        New-Item -ItemType Directory -Force -Path "installer/inno-setup/resources"
        
        # 复制资源文件
        if (Test-Path "Electron_App/public/favicon.ico") {
          Copy-Item "Electron_App/public/favicon.ico" "installer/inno-setup/resources/icon.ico"
        }
    
    # 构建 Electron 应用 (高可靠性)
    - name: Build Electron App (High Reliability)
      working-directory: Electron_App
      timeout-minutes: 20
      run: |
        Write-Output "=== High Reliability Electron Build ==="
        Write-Output "Node.js version: $(node --version)"
        Write-Output "NPM version: $(npm --version)"
        
        # 清理之前的构建
        if (Test-Path "dist_electron") {
          Remove-Item "dist_electron" -Recurse -Force
          Write-Output "✓ Cleaned previous build artifacts"
        }
        
        Write-Output "`n=== Starting Optimized Build ==="
        
        # 重试机制
        $maxRetries = 2
        $retryCount = 0
        $buildSuccess = $false
        
        while (-not $buildSuccess -and $retryCount -le $maxRetries) {
          $retryCount++
          Write-Output "Build attempt $retryCount of $($maxRetries + 1)..."
          
          try {
            # 使用优化参数的构建命令
            npm run electron:build -- --win --ia32 --dir
            $buildExitCode = $LASTEXITCODE
            
            if ($buildExitCode -eq 0) {
              Write-Output "✓ Build completed successfully on attempt $retryCount"
              $buildSuccess = $true
            } else {
              Write-Output "✗ Build failed on attempt $retryCount (exit code: $buildExitCode)"
              if ($retryCount -le $maxRetries) {
                Write-Output "Retrying in 10 seconds..."
                Start-Sleep -Seconds 10
              }
            }
          } catch {
            Write-Output "✗ Build exception on attempt $retryCount`: $($_.Exception.Message)"
            if ($retryCount -le $maxRetries) {
              Write-Output "Retrying in 10 seconds..."
              Start-Sleep -Seconds 10
            }
          }
        }
        
        if (-not $buildSuccess) {
          Write-Error "All build attempts failed"
          exit 1
        }
        
        # 验证输出
        Write-Output "`n=== Verifying Build Output ==="
        $expectedDirs = @("win-ia32-unpacked", "win-unpacked")
        $foundDir = $null
        
        foreach ($dir in $expectedDirs) {
          $fullPath = "dist_electron\$dir"
          if (Test-Path $fullPath) {
            Write-Output "✓ Found directory: $fullPath"
            $foundDir = $fullPath
            break
          }
        }
        
        if (-not $foundDir) {
          Write-Error "✗ No unpacked directory found after successful build"
          if (Test-Path "dist_electron") {
            Write-Output "Available directories:"
            Get-ChildItem "dist_electron" -Directory | ForEach-Object { Write-Output "  - $($_.Name)" }
          }
          exit 1
        }
        
        Write-Output "✓ Electron build completed and verified successfully"
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        NODE_OPTIONS: "--max-old-space-size=4096"
        ELECTRON_BUILDER_CACHE: false
    
    # 验证构建输出并动态适配目录结构
    - name: Verify Build Output and Adapt
      run: |
        Write-Output "=== Final Build Verification ==="
        
        # 动态查找Electron unpacked目录
        $electronBaseDir = "Electron_App\dist_electron"
        $electronUnpackedDir = $null
        
        if (Test-Path $electronBaseDir) {
          $possibleDirs = @("win-ia32-unpacked", "win-unpacked", "*unpacked*")
          foreach ($pattern in $possibleDirs) {
            $matches = Get-ChildItem $electronBaseDir -Directory -Name $pattern -ErrorAction SilentlyContinue
            if ($matches) {
              $electronUnpackedDir = "$electronBaseDir\$($matches[0])"
              Write-Output "✓ Found Electron unpacked directory: $electronUnpackedDir"
              break
            }
          }
        }
        
        if (-not $electronUnpackedDir) {
          Write-Error "✗ No Electron unpacked directory found"
          Write-Output "Available directories in ${electronBaseDir}:"
          if (Test-Path $electronBaseDir) {
            Get-ChildItem $electronBaseDir -Directory | ForEach-Object { Write-Output "  - $($_.Name)" }
          }
          exit 1
        }
        
        # 检查Python组件
        $pythonLock = "LockSys_Python\dist\win32"
        $pythonConfig = "ChangeConfigUtil\dist\win32"
        
        if (Test-Path $pythonLock) {
          Write-Output "✓ Python Lock Service found: $pythonLock"
        } else {
          Write-Error "✗ Python Lock Service not found: $pythonLock"
          exit 1
        }
        
        if (Test-Path $pythonConfig) {
          Write-Output "✓ Python Config Tool found: $pythonConfig"
        } else {
          Write-Error "✗ Python Config Tool not found: $pythonConfig"
          exit 1
        }
        
        Write-Output "`n=== Setting up environment variables for next steps ==="
        $unpackedDirName = $electronUnpackedDir.Split('\')[-1]
        Write-Output "ELECTRON_UNPACKED_DIR=$unpackedDirName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "Environment variable set: ELECTRON_UNPACKED_DIR=$unpackedDirName"
        Write-Output "Full path was: $electronUnpackedDir"
        Write-Output "Extracted directory name: $unpackedDirName"
    
    # 编译安装程序 (最终优化版)
    - name: Compile Installer (Final Optimized)
      working-directory: installer/inno-setup
      timeout-minutes: 10
      run: |
        Write-Output "=== Preparing Installer Compilation ==="
        
        # 检查Inno Setup脚本存在
        if (-not (Test-Path "installer.iss")) {
          Write-Error "installer.iss not found!"
          exit 1
        }
        
        # 使用环境变量中的实际目录名
        $electronDirName = $env:ELECTRON_UNPACKED_DIR
        if (-not $electronDirName) {
          Write-Error "ELECTRON_UNPACKED_DIR environment variable not set!"
          exit 1
        }
        
        Write-Output "Using Electron directory: $electronDirName"
        
        # 检查关键源文件是否存在
        Write-Output "Checking source files for Inno Setup..."
        
        $electronSource = "..\..\Electron_App\dist_electron\$electronDirName"
        $pythonLockSource = "..\..\LockSys_Python\dist\win32"
        $pythonConfigSource = "..\..\ChangeConfigUtil\dist\win32"
        
        Write-Output "Checking: $electronSource"
        if (-not (Test-Path $electronSource)) {
          Write-Error "Electron source not found: $electronSource"
          Write-Output "Available directories in ..\..\Electron_App\dist_electron:"
          Get-ChildItem "..\..\Electron_App\dist_electron" -Directory | ForEach-Object { Write-Output "  - $($_.Name)" }
          exit 1
        } else {
          Write-Output "✓ Electron source verified: $electronSource"
        }
        
        Write-Output "Checking: $pythonLockSource"
        if (-not (Test-Path $pythonLockSource)) {
          Write-Error "Python Lock Service source not found: $pythonLockSource"
          exit 1
        } else {
          Write-Output "✓ Python Lock Service verified: $pythonLockSource"
        }
        
        Write-Output "Checking: $pythonConfigSource"
        if (-not (Test-Path $pythonConfigSource)) {
          Write-Error "Python Config Tool source not found: $pythonConfigSource"
          exit 1
        } else {
          Write-Output "✓ Python Config Tool verified: $pythonConfigSource"
        }
        
        Write-Output "`n=== Creating dynamic installer script ==="
        
        # 创建临时的installer脚本，替换动态路径
        $originalScript = Get-Content "installer.iss" -Raw
        $modifiedScript = $originalScript -replace 'win-\{#ArchSuffix\}-unpacked', $electronDirName
        $tempScript = "installer_temp.iss"
        $modifiedScript | Out-File -FilePath $tempScript -Encoding UTF8
        
        Write-Output "Created temporary installer script with dynamic path: $tempScript"
        Write-Output "Electron source path in script: $electronDirName"
        
        Write-Output "`n=== Compiling installer ==="
        Write-Output "Command: iscc `"$tempScript`" /DARCHITECTURE=`"x86`" /O`"../../dist`" /F`"UniversityMarking-Setup-x86`""
        
        # 编译安装程序 (32位版本)
        iscc "$tempScript" /DARCHITECTURE="x86" /O"../../dist" /F"UniversityMarking-Setup-x86"
        $compileExitCode = $LASTEXITCODE
        
        # 清理临时文件
        Remove-Item $tempScript -ErrorAction SilentlyContinue
        
        Write-Output "`n=== Compilation Exit Code: $compileExitCode ==="
        
        # 检查输出文件
        if (-not (Test-Path "../../dist/UniversityMarking-Setup-x86.exe")) {
          Write-Error "Installer compilation failed! Output file not found."
          exit 1
        }
        
        $installerSize = (Get-Item "../../dist/UniversityMarking-Setup-x86.exe").Length
        Write-Output "✓ Installer compilation successful!"
        Write-Output "✓ Output file: ../../dist/UniversityMarking-Setup-x86.exe ($installerSize bytes)"
    
    # 执行构建后处理
    - name: Post-build Processing
      run: |
        node installer/build-scripts/post-build.js
    
    # 计算文件哈希
    - name: Calculate File Hashes
      run: |
        $files = Get-ChildItem -Path "dist" -Filter "*.exe"
        foreach ($file in $files) {
          $hash = Get-FileHash -Path $file.FullName -Algorithm SHA256
          Write-Output "$($file.Name): $($hash.Hash)" | Out-File -Append "dist/checksums.txt"
        }
    
    # 上传构建产物
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-${{ matrix.architecture }}
        path: |
          dist/*.exe
          dist/*.md
          dist/*.json
          dist/*.txt
        retention-days: 30
    
    # 上传到 Release（仅在标签推送时）
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/UniversityMarking-Setup-x86.exe
          dist/checksums.txt
          dist/RELEASE-NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        generate_release_notes: true
        name: "UniversityMarking v${{ github.ref_name }} (${{ matrix.architecture }})"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 合并构建产物
  merge-artifacts:
    name: Merge Build Artifacts
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Merge Artifacts
      run: |
        mkdir -p merged
        find artifacts -name "*.exe" -exec cp {} merged/ \;
        find artifacts -name "*.md" -exec cp {} merged/ \;
        find artifacts -name "*.json" -exec cp {} merged/ \;
        find artifacts -name "*.txt" -exec cp {} merged/ \;
    
    - name: Upload Merged Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: universitymarking-installer-all
        path: merged/
        retention-days: 90

  # 自动化测试
  test:
    name: Test Installer
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        architecture: [x86]  # 暂时专注32位版本测试
    
    steps:
    - name: Download Installer
      uses: actions/download-artifact@v4
      with:
        name: installer-${{ matrix.architecture }}
        path: test-installer
    
    - name: Test Installation
      run: |
        # 模拟静默安装测试
        $installer = Get-ChildItem -Path "test-installer" -Filter "*.exe" | Select-Object -First 1
        if ($installer) {
          Write-Output "Testing installer: $($installer.Name)"
          # 这里可以添加更多的测试逻辑
          Write-Output "Installer test completed successfully"
        } else {
          Write-Error "No installer found for testing"
          exit 1
        }