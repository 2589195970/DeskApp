name: Build Windows Installer

# 工作流触发条件
on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: '发布类型'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - release
        - beta

# 环境变量
env:
  NODE_VERSION: '16.20.2'  # Vue CLI 4 兼容版本
  PYTHON_VERSION: '3.9'
  INNO_SETUP_VERSION: '6.2.2'

jobs:
  build:
    name: Build UniversityMarking Installer
    runs-on: windows-latest
    
    strategy:
      matrix:
        architecture: [x86]  # 暂时专注32位版本
    
    steps:
    # 检出代码
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
    
    # 设置 Node.js 环境
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16.20.2'
        cache: 'npm'
        cache-dependency-path: 'Electron_App/package-lock.json'
    
    # 验证 Node.js 版本
    - name: Verify Node.js Version
      run: |
        Write-Output "Node.js version: $(node --version)"
        Write-Output "npm version: $(npm --version)"
        $nodeVersion = node --version
        if ($nodeVersion -ne "v16.20.2") {
          Write-Error "Error: Node.js version mismatch! Expected v16.20.2, got $nodeVersion"
          exit 1
        }
    
    # 设置 Python 环境
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: ${{ matrix.architecture }}
    
    # 安装 Python 依赖
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r LockSys_Python/requirements.txt
    
    # 安装 Electron 依赖
    - name: Install Electron Dependencies
      working-directory: Electron_App
      run: |
        npm ci
      env:
        NODE_OPTIONS: "--max-old-space-size=4096"
    
    # 构建 Python 组件
    - name: Build Python Components
      run: |
        # 构建系统锁定服务 (32位)
        cd LockSys_Python
        mkdir -p dist/win32
        pyinstaller --onefile --distpath dist/win32 main.py
        
        # 构建配置工具 (32位)
        cd ../ChangeConfigUtil
        mkdir -p dist/win32
        pyinstaller --onefile --windowed --distpath dist/win32 main.py
    
    # 安装 Inno Setup
    - name: Install Inno Setup
      run: |
        $url = "https://jrsoftware.org/download.php/is.exe"
        $output = "$env:TEMP\innosetup.exe"
        Invoke-WebRequest -Uri $url -OutFile $output
        Start-Process -FilePath $output -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART" -Wait
        
        # 添加到 PATH
        $innoPath = "${env:ProgramFiles(x86)}\Inno Setup 6"
        echo "$innoPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    # 准备构建环境
    - name: Prepare Build Environment
      run: |
        # 创建目录结构
        New-Item -ItemType Directory -Force -Path "dist"
        New-Item -ItemType Directory -Force -Path "installer/inno-setup/resources"
        
        # 复制资源文件
        if (Test-Path "Electron_App/public/favicon.ico") {
          Copy-Item "Electron_App/public/favicon.ico" "installer/inno-setup/resources/icon.ico"
        }
    
    # 构建 Electron 应用 (直接在Actions中)
    - name: Build Electron App
      working-directory: Electron_App
      run: |
        Write-Output "=== Electron Build Diagnostics ==="
        Write-Output "Node.js version: $(node --version)"
        Write-Output "NPM version: $(npm --version)"
        Write-Output "Current directory: $(Get-Location)"
        
        Write-Output "`n=== Checking package.json scripts ==="
        if (Test-Path "package.json") {
          $packageJson = Get-Content "package.json" | ConvertFrom-Json
          Write-Output "Available scripts:"
          $packageJson.scripts.PSObject.Properties | ForEach-Object { Write-Output "  $($_.Name): $($_.Value)" }
        }
        
        Write-Output "`n=== Checking electron-builder.json ==="
        if (Test-Path "electron-builder.json") {
          $builderConfig = Get-Content "electron-builder.json" | ConvertFrom-Json
          Write-Output "Output directory: $($builderConfig.directories.output)"
          Write-Output "Win targets:"
          $builderConfig.win.target | ForEach-Object { Write-Output "  Target: $($_.target), Arch: $($_.arch)" }
        }
        
        Write-Output "`n=== Starting Electron Build ==="
        Write-Output "Command: npm run electron:build -- --win --ia32 --dir"
        
        # 执行构建并捕获所有输出
        $env:DEBUG = "electron-builder"
        npm run electron:build -- --win --ia32 --dir
        $buildExitCode = $LASTEXITCODE
        
        Write-Output "`n=== Build Exit Code: $buildExitCode ==="
        
        Write-Output "`n=== Checking dist_electron directory structure ==="
        if (Test-Path "dist_electron") {
          Write-Output "✓ dist_electron directory exists"
          Write-Output "Contents of dist_electron:"
          Get-ChildItem "dist_electron" -Recurse | ForEach-Object {
            $relativePath = $_.FullName.Replace((Get-Location).Path, "").TrimStart('\')
            if ($_.PSIsContainer) {
              Write-Output "  [DIR]  $relativePath"
            } else {
              Write-Output "  [FILE] $relativePath ($($_.Length) bytes)"
            }
          }
        } else {
          Write-Error "✗ dist_electron directory does not exist!"
        }
        
        Write-Output "`n=== Looking for expected output ==="
        $expectedDirs = @("win-ia32-unpacked", "win-unpacked", "unpacked")
        $foundDir = $null
        
        foreach ($dir in $expectedDirs) {
          $fullPath = "dist_electron\$dir"
          if (Test-Path $fullPath) {
            Write-Output "✓ Found directory: $fullPath"
            $foundDir = $fullPath
            break
          }
        }
        
        if (-not $foundDir) {
          Write-Error "✗ No unpacked directory found. Available directories:"
          if (Test-Path "dist_electron") {
            Get-ChildItem "dist_electron" -Directory | ForEach-Object { Write-Output "  - $($_.Name)" }
          }
          exit 1
        }
        
        if ($buildExitCode -ne 0) {
          Write-Error "Electron build failed with exit code: $buildExitCode"
          exit $buildExitCode
        }
        
        Write-Output "`n=== Build completed successfully ==="
      env:
        ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
        NODE_OPTIONS: "--max-old-space-size=4096"
    
    # 验证构建输出并动态适配目录结构
    - name: Verify Build Output and Adapt
      run: |
        Write-Output "=== Final Build Verification ==="
        
        # 动态查找Electron unpacked目录
        $electronBaseDir = "Electron_App\dist_electron"
        $electronUnpackedDir = $null
        
        if (Test-Path $electronBaseDir) {
          $possibleDirs = @("win-ia32-unpacked", "win-unpacked", "*unpacked*")
          foreach ($pattern in $possibleDirs) {
            $matches = Get-ChildItem $electronBaseDir -Directory -Name $pattern -ErrorAction SilentlyContinue
            if ($matches) {
              $electronUnpackedDir = "$electronBaseDir\$($matches[0])"
              Write-Output "✓ Found Electron unpacked directory: $electronUnpackedDir"
              break
            }
          }
        }
        
        if (-not $electronUnpackedDir) {
          Write-Error "✗ No Electron unpacked directory found"
          Write-Output "Available directories in $electronBaseDir:"
          if (Test-Path $electronBaseDir) {
            Get-ChildItem $electronBaseDir -Directory | ForEach-Object { Write-Output "  - $($_.Name)" }
          }
          exit 1
        }
        
        # 检查Python组件
        $pythonLock = "LockSys_Python\dist\win32"
        $pythonConfig = "ChangeConfigUtil\dist\win32"
        
        if (Test-Path $pythonLock) {
          Write-Output "✓ Python Lock Service found: $pythonLock"
        } else {
          Write-Error "✗ Python Lock Service not found: $pythonLock"
          exit 1
        }
        
        if (Test-Path $pythonConfig) {
          Write-Output "✓ Python Config Tool found: $pythonConfig"
        } else {
          Write-Error "✗ Python Config Tool not found: $pythonConfig"
          exit 1
        }
        
        Write-Output "`n=== Setting up environment variables for next steps ==="
        $unpackedDirName = Split-Path $electronUnpackedDir -Leaf
        Write-Output "ELECTRON_UNPACKED_DIR=$unpackedDirName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Write-Output "Environment variable set: ELECTRON_UNPACKED_DIR=$unpackedDirName"
    
    # 编译安装程序 (动态适配)
    - name: Compile Installer with Dynamic Paths
      working-directory: installer/inno-setup
      run: |
        Write-Output "=== Preparing Installer Compilation ==="
        
        # 检查Inno Setup脚本存在
        if (-not (Test-Path "installer.iss")) {
          Write-Error "installer.iss not found!"
          exit 1
        }
        
        # 使用环境变量中的实际目录名
        $electronDirName = $env:ELECTRON_UNPACKED_DIR
        if (-not $electronDirName) {
          Write-Error "ELECTRON_UNPACKED_DIR environment variable not set!"
          exit 1
        }
        
        Write-Output "Using Electron directory: $electronDirName"
        
        # 检查关键源文件是否存在
        Write-Output "Checking source files for Inno Setup..."
        
        $electronSource = "..\..\Electron_App\dist_electron\$electronDirName"
        $pythonLockSource = "..\..\LockSys_Python\dist\win32"
        $pythonConfigSource = "..\..\ChangeConfigUtil\dist\win32"
        
        Write-Output "Checking: $electronSource"
        if (-not (Test-Path $electronSource)) {
          Write-Error "Electron source not found: $electronSource"
          Write-Output "Available directories in ..\..\Electron_App\dist_electron:"
          Get-ChildItem "..\..\Electron_App\dist_electron" -Directory | ForEach-Object { Write-Output "  - $($_.Name)" }
          exit 1
        } else {
          Write-Output "✓ Electron source verified: $electronSource"
        }
        
        Write-Output "Checking: $pythonLockSource"
        if (-not (Test-Path $pythonLockSource)) {
          Write-Error "Python Lock Service source not found: $pythonLockSource"
          exit 1
        } else {
          Write-Output "✓ Python Lock Service verified: $pythonLockSource"
        }
        
        Write-Output "Checking: $pythonConfigSource"
        if (-not (Test-Path $pythonConfigSource)) {
          Write-Error "Python Config Tool source not found: $pythonConfigSource"
          exit 1
        } else {
          Write-Output "✓ Python Config Tool verified: $pythonConfigSource"
        }
        
        Write-Output "`n=== Creating dynamic installer script ==="
        
        # 创建临时的installer脚本，替换动态路径
        $originalScript = Get-Content "installer.iss" -Raw
        $modifiedScript = $originalScript -replace 'win-\{#ArchSuffix\}-unpacked', $electronDirName
        $tempScript = "installer_temp.iss"
        $modifiedScript | Out-File -FilePath $tempScript -Encoding UTF8
        
        Write-Output "Created temporary installer script with dynamic path: $tempScript"
        Write-Output "Electron source path in script: $electronDirName"
        
        Write-Output "`n=== Compiling installer ==="
        Write-Output "Command: iscc `"$tempScript`" /DARCHITECTURE=`"x86`" /O`"../../dist`" /F`"UniversityMarking-Setup-x86`""
        
        # 编译安装程序 (32位版本)
        iscc "$tempScript" /DARCHITECTURE="x86" /O"../../dist" /F"UniversityMarking-Setup-x86"
        $compileExitCode = $LASTEXITCODE
        
        # 清理临时文件
        Remove-Item $tempScript -ErrorAction SilentlyContinue
        
        Write-Output "`n=== Compilation Exit Code: $compileExitCode ==="
        
        # 检查输出文件
        if (-not (Test-Path "../../dist/UniversityMarking-Setup-x86.exe")) {
          Write-Error "Installer compilation failed! Output file not found."
          exit 1
        }
        
        $installerSize = (Get-Item "../../dist/UniversityMarking-Setup-x86.exe").Length
        Write-Output "✓ Installer compilation successful!"
        Write-Output "✓ Output file: ../../dist/UniversityMarking-Setup-x86.exe ($installerSize bytes)"
    
    # 执行构建后处理
    - name: Post-build Processing
      run: |
        node installer/build-scripts/post-build.js
    
    # 计算文件哈希
    - name: Calculate File Hashes
      run: |
        $files = Get-ChildItem -Path "dist" -Filter "*.exe"
        foreach ($file in $files) {
          $hash = Get-FileHash -Path $file.FullName -Algorithm SHA256
          Write-Output "$($file.Name): $($hash.Hash)" | Out-File -Append "dist/checksums.txt"
        }
    
    # 上传构建产物
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installer-${{ matrix.architecture }}
        path: |
          dist/*.exe
          dist/*.md
          dist/*.json
          dist/*.txt
        retention-days: 30
    
    # 上传到 Release（仅在标签推送时）
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/UniversityMarking-Setup-x86.exe
          dist/checksums.txt
          dist/RELEASE-NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        generate_release_notes: true
        name: "UniversityMarking v${{ github.ref_name }} (${{ matrix.architecture }})"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 合并构建产物
  merge-artifacts:
    name: Merge Build Artifacts
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Merge Artifacts
      run: |
        mkdir -p merged
        find artifacts -name "*.exe" -exec cp {} merged/ \;
        find artifacts -name "*.md" -exec cp {} merged/ \;
        find artifacts -name "*.json" -exec cp {} merged/ \;
        find artifacts -name "*.txt" -exec cp {} merged/ \;
    
    - name: Upload Merged Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: universitymarking-installer-all
        path: merged/
        retention-days: 90

  # 自动化测试
  test:
    name: Test Installer
    needs: build
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        architecture: [x86]  # 暂时专注32位版本测试
    
    steps:
    - name: Download Installer
      uses: actions/download-artifact@v4
      with:
        name: installer-${{ matrix.architecture }}
        path: test-installer
    
    - name: Test Installation
      run: |
        # 模拟静默安装测试
        $installer = Get-ChildItem -Path "test-installer" -Filter "*.exe" | Select-Object -First 1
        if ($installer) {
          Write-Output "Testing installer: $($installer.Name)"
          # 这里可以添加更多的测试逻辑
          Write-Output "Installer test completed successfully"
        } else {
          Write-Error "No installer found for testing"
          exit 1
        }